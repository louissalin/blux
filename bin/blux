#!/usr/bin/env ruby
#
# Copyright 2010 Louis-Philippe Salin de l'Etoile, aka Louis Salin
# email: louis.phil@gmail.com
#
# This file is part of Blux.
#
# Blux is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Blux is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Blux.  If not, see <http://www.gnu.org/licenses/>.

require 'atom/entry' # sudo gem install atom-tools
require "#{File.dirname(__FILE__)}/../lib/blux_option_parser.rb"
require "#{File.dirname(__FILE__)}/../lib/blog_manager.rb"

def validate_command(options)
	if (options.command != nil)
		yield options
	else
		msg = "No command specified. Use -h for a list of possible commands"
		raise RuntimeError, msg
	end
end

def validate_set_options(options)
	if options.attributes.length.modulo(2) == 0
		yield options.attributes[0], options.attributes[1]
	else
		msg = "Attribute error: you must specify an attribute name and a value."
		raise RuntimeError, msg
	end
end

def check_filename(options, blog_manager)
	filename = blog_manager.draft_manager.get_latest_created_draft if options.use_latest
	filename = blog_manager.draft_manager.get_draft_by_title(options.title) if options.use_title
	filename = options.filename || filename

	puts "check_filename: #{filename}" if options.verbose
	if filename != nil
		yield filename
	else
		msg = "Please specify the draft file you want to work with.\n"
		msg = msg + "  Try using the --latest option to use the latest draft.\n"
		msg = msg + "  Or try to get a draft with a specific title with the --title option."

		raise RuntimeError, msg
	end
end

def build_post_info(options)
	switch = nil
	entry = Array.new
	response = Array.new
	url = ""

	ARGF.each do |line| 
		if line == "--entry--\n"
			switch = :entry
			next
		elsif line == "--response--\n"
			switch = :response
			next
		elsif line == "--url--\n"
			switch = :url
			next
		end

		case (switch)
		when :entry
			entry << line
		when :response
			response << line
		when :url
			url = line
		end
	end

	entry_text = entry.join
	response_text = response.join

	msg = "Error communicating with the publishing script. Exiting..."
	raise RuntimeError, msg if response.length == 0
	
	return entry, response, url
end

begin
	validate_command(BluxOptionParser.parse(ARGV)) do |options|
		draft_manager = DraftManager.new
		mgr = BlogManager.new(draft_manager, :verbose => options.verbose)	
		mgr.load_config
		mgr.start

		case options.command
		when :new
			mgr.draft_manager.create_draft
		when :edit
			check_filename(options, mgr) do |filename|
				mgr.draft_manager.edit_draft filename
			end
		when :list
			mgr.draft_manager.list.each do |item|
				break if options.filename != nil && options.filename != item
				puts "#{item}"
				puts "  #{mgr.draft_manager.show_info(item)}" if options.list_details
				puts "  #{mgr.draft_manager.show_preview(item)}" if options.list_preview
			end
		when :set
			check_filename(options, mgr) do |filename|
				validate_set_options(options) do |attribute, value|
					mgr.draft_manager.set_attribute(filename, attribute, value)
				end
			end
		when :unset
			check_filename(options, mgr) do |filename|
				mgr.draft_manager.delete_attribute(filename, options.attribute)
			end
		when :out
			check_filename(options, mgr) do |filename|
				post = mgr.post_manager.get_post filename
				STDOUT.puts(post.text)
			end
		when :convert
			check_filename(options, mgr) do |filename|
				convert_cmd = "ruby #{File.dirname(__FILE__)}/../lib/textile_to_html.rb"
				system "blux --out -f #{filename} | #{convert_cmd}"
			end
		when :publish
			check_filename(options, mgr) do |filename|
				puts "publishing" if options.verbose
				mgr.publish filename
			end
		when :update
			check_filename(options, mgr) do |filename|
				puts "updating" if options.verbose
				mgr.update filename
			end
		when :delete
			check_filename(options, mgr) do |filename|
				puts "deleting" if options.verbose
				mgr.delete filename
			end
		when :show_post_info
			entry, response, url = build_post_info(options)
				if options.verbose
					puts "entry:" 
					puts entry 

					puts "response:" 
					puts response 

					puts "edit url:" 
					puts url 
				end
		when :set_edit_url
			check_filename(options, mgr) do |filename|
				entry, response, url = build_post_info(options)

				if options.verbose
					puts "entry:" 
					puts entry 

					puts "response:" 
					puts response 

					puts "edit url:" 
					puts url 
				end

				mgr.draft_manager.set_attribute(filename, 'edit_url', url.strip)
			end
		when :version
			puts "0.0.6"
		end
	end
rescue 
	STDERR << "fatal error: #{$!}\n"
	exit 1
end

