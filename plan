plan/ideas for blux usage:

blux.rb will be a dsl callable from the command line. This means everything must be done in one single command. Any output needs to be easily parsable by calling programs.

command examples (all work on drafts only for now):
	$ blux -n  (--new)  						    	--> new draft
	$ blux -s (--set) --latest title "bla bla bla" 		--> sets title on latest draft
	$ blux -s -f draft1.23 title "bla bla bla"	 		--> sets title on draft draft1.23
	$ blux -s --title "old title" title "bla bla bla"	--> modifies title
	$ blux -l (--list)							    	--> lists drafts & attributes
	$ blux -l --with-preview							--> lists drafts, attrs, & preview
	$ blux -l --details -f draft1.23					--> lists attributes for draft1.23
	$ blux -o (--out) -f draft1.23						--> dumps the content of draft1.23
	$ blux -c (--convert) --latest						--> outputs html for latest draft
	$ blux -c -f draft1.23								--> outputs html for draft draft1.23
	$ blux -e (--edit) --title "title 1"
	$ blux -e --latest
	$ blux -e -f draft1.23

publishing commands should look like this:
	$ blux -p (--publish) --latest
	$ blux -u (--update) --latest
	$ blux -p -f draft1.23
	$ blux --set_id -f draft1.23				--> sets the id of a published post 
													(through stdin)

after which the draft will be renamed to postxxx and a new list of commands should exist to manage published posts.

eventually, blux should manage timed publishing.
